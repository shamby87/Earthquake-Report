// Enable collecting coverage also for unit tests
apply plugin: 'jacoco'

jacoco {
    // This should match the one inside build.gradle
    toolVersion = '0.8.6'
}

def carvedTests = project.hasProperty('carvedTests')// ? project.getProperty('carvedTests') : false //Default value false

tasks.withType(Test) {
    jacoco.includeNoLocationClasses = true
    // This will break JDK 9 otherwise
    jacoco.excludes = ['jdk.internal.*']
}

task jacocoUnitTestCoverage(type: JacocoReport, dependsOn: ['testDebugUnitTest']) {
    group = 'Reporting'
    description = 'Generate JaCoCo coverage report for unit tests'
    reports {
        xml.enabled = true
        html.enabled = true
        if (carvedTests) {
            println "\n\n\n\n\n\n"
            println " -- " + file("$coverageReportPrefix/html")

            html.destination file("$coverageReportPrefix/html")
            xml.destination file("$coverageReportPrefix/xml")
        }
    }
    def fileFilter = ['**/R.class', '**/BuildConfig.class', '**/R.class', '**/R$*.class', '**/BuildConfig.*', '**/Manifest*.*', '**/*Test*.*', 'android/**/*.*', 'android/**/*.*']
    def coverageSourceDirs = ["${project.projectDir}/src/main/java"]

    classDirectories = fileTree(dir: "${buildDir}/intermediates/classes/debug", excludes: fileFilter)
    sourceDirectories = files(coverageSourceDirs)
    executionData = fileTree(
            dir: "${buildDir}",
            include: ['jacoco/testDebugUnitTest.exec']
    )
}

task jacocoGUITestCoverage(type: JacocoReport, dependsOn: ['connectedAndroidTest']) {
    group = 'Reporting'
    description = 'Generate JaCoCo coverage report for GUI tests'
    reports {
        xml.enabled  = true
        html.enabled = true

        println "\n\n\n"
        println " jacocoGUITestCoverage: Reporting to -- " + html.destination
        println "\n\n\n"

    }
    def fileFilter = ['**/R.class', '**/BuildConfig.class', '**/R.class', '**/R$*.class', '**/BuildConfig.*', '**/Manifest*.*', '**/*Test*.*', 'android/**/*.*', 'android/**/*.*']
    def coverageSourceDirs = ["${project.projectDir}/src/main/java"]

    classDirectories = fileTree(dir: "${buildDir}/intermediates/classes/debug", excludes: fileFilter)
    sourceDirectories = files(coverageSourceDirs)
    executionData = fileTree(
            dir: "${buildDir}",
            include: ['outputs/code_coverage/debugAndroidTest/connected/*coverage.ec']
    )
}
